import java.util.*;

public class Elevens {

	static int[]deckValue = new int [] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6,
			7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	static String[] userDeck = new String[] { "1H", "1D", "1C", "1S", "2H", "2D", "2C", "2S", "3H", "3D", "3C", "4S",
			"5H", "5D", "5C", "5S", "6H", "6D", "6C", "6S", "7H", "7D", "7C", "7S", "8H", "8D", "8C", "8S", "9H", "9D",
			"9C", "9S", "10H", "10D", "10C", "10S" };
	static String[] userBoard = new String[9];
	static int[] logicBoard = new int[9];

	public static void main(String[] args) throws InterruptedException {

		welcome();
		displayGrid();
		fillBoard();
		game();

	}

	private static void welcome() throws InterruptedException {
		System.out.println("Welcome to the Solitaire Game of Elevens!");
		Thread.sleep(1000);
		System.out.println("The goal is to eliminate cards that equal to 11 and eliminate the entire deck!");

	}

	private static void fillBoard() {

		Random ran = new Random();

		for (int i = 0; i < logicBoard.length; i++) {
			int randNum = ran.nextInt(40);
			while (deckValue[randNum] == 0) {
				randNum = ran.nextInt(40);
			}
			logicBoard[i] = deckValue[randNum];
			userBoard[i] = userDeck[randNum];
			deckValue[randNum] = 0;
		}
	}

	private static boolean displayGrid() {
		String[] userBoard = new String[9];
		for (int i = 0; i < userBoard.length; i++) {
			if (i == 0 || i == 3 || i == 6) {
				System.out.print("|");
			}
			System.out.print(" " + userBoard[i] + " |");
			if (i == 2 || i == 5 || i == 8) {
				System.out.println();
			}

		}
		System.out.println(" ");
		System.out.println("^!That's your draw!^");
		return true;

	}

	private static void game() {
		Scanner user = new Scanner(System.in);

		boolean game = true;
		while (game) {
			System.out.println(" ");
			System.out.println("Press the enter key when you see the cards you'd like to remove!");
			try {
				System.in.read();
			} catch (Exception e) {
			}
			System.out.println(displayGrid());
			System.out.println("What is the 1st card you want to remove?");
			int a = user.nextInt();
			System.out.println("What is the 2nd card you want to remove?");
			int b = user.nextInt();
			if (a + b == 11) {
				System.out.println("Those do equal 11! Great job!");
				if (cardsInDeck()) {
					getTwoCards();
				}

			} else {
				System.out.println("You can't trick me man! Those don't equal 11! Try again!");
			}
		}
	}

	private static void getTwoCards() {

		Random ran = new Random();
		int randNum = ran.nextInt();
		int[] logicBoard = new int[40];
		while (deckValue[randNum] == 0) {
			randNum = ran.nextInt(10 - 1 + 1) + 1;
			logicBoard[randNum] = deckValue[randNum];
			userBoard[randNum] = userDeck[randNum];
			deckValue[randNum] = 0;

		}
	}

	private static boolean cardsInDeck() {

		int deckSum = 0;
		if (deckSum > 0) {
			return true;
		} else {
			return false;
		}

	}
}
